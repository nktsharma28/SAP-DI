import requests
import datetime
import json
from requests.auth import HTTPBasicAuth
from datetime import timedelta
#Establish connection to DI non prod
# headers = {'Accept':'application/json', 'Content-Type':'application/json'}
auth = HTTPBasicAuth('dadapp001\\gwr0459', 'Summer@2023')
get_response = requests.get('https://apacdidev.mykft.net/auth/login/', verify=False, auth=auth)
# api.send("output1",str(get_response.cookies['Authorization']))
auth_cookie = get_response.cookies['Authorization']
# api.send("output1", "before"+auth_cookie)
auth_cookie = auth_cookie[1:-1]

# auth_cookie = auth_cookie.replace("\"","")
# api.send("output1","after"+auth_cookie)


today = datetime.datetime.now()
stopTime = int(round(today.timestamp()))
#api.send("output1",str(today))
#api.send("output1",str(stopTime))
yesterday = today - timedelta(days=1)
#api.send("output1",str(yesterday))
startTime = int(round(yesterday.timestamp()))
#api.send("output1",str(startTime))
yest = datetime.datetime.fromtimestamp(startTime)
#api.send("output1",str(yest))
header = {'Authorization' : auth_cookie, 'Accept':'application/json', 'Content-Type':'application/json'}

json_body = {"detailLevel":"graph","filter":["and",["or",["equal","status","pending"],["equal","status","running"],["equal","status","dead"],["equal","status","completed"]]],"limit":1000}
json_data = json.dumps(json_body)
json_dict = json.loads(json_data)
json_dict['filter'].append(["and",["greaterThan","started",startTime],["lessThan","stopped",stopTime]])
json_data = json.dumps(json_dict)
#api.send("output1",str(json_data))
json_data = json.loads(json_data)
#api.send("output1",str(json_data))

# test_data = {"detailLevel":"graph","filter":["and",["or",["equal","status","pending"],["equal","status","running"],["equal","status","dead"],["equal","status","completed"]],["or",["contains","src","Area"],["contains","src","Area"],["contains","src","ECC14"],["contains","src","Area"]],["and",["greaterThan","started",1668516989],["lessThan","stopped",1668689789]]],"sortSpecs":[["updated","desc"]],"limit":1000}

json_response = requests.post('https://apacdidev.mykft.net/app/pipeline-modeler/service/v1/runtime/graphsquery', verify = False, headers = header, json=json_data)
# # api.send("output1",str(json_response.content))
json_content = json_response.content

def generate_csv(data):
    encoded_json = data.decode("utf-8")
    api_output = json.loads(encoded_json)
    csvstr = ''
    header = 'src;handle;status;submitted;started;running;updated;stopped\n'
    csvstr = csvstr + header
    
    for entity in api_output:
        src = entity['src']
        handle = entity['handle']
        status = entity['status']
        submitted = datetime.datetime.fromtimestamp(entity['submitted'])
        started = datetime.datetime.fromtimestamp(entity['started'])
        running = datetime.datetime.fromtimestamp(entity['running'])
        updated = datetime.datetime.fromtimestamp(entity['updated'])
        stopped = datetime.datetime.fromtimestamp(entity['stopped'])
    
        csvrecord = f'{src};{handle};{status};{submitted};{started};{running};{updated};{stopped}\n'
        csvstr = csvstr+csvrecord
        print(csvstr)
        curr_timestp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
        output_filename = '/files/vflow/runtimes_graphs.csv'
        with open('runtimes_graphs.csv', 'w') as out_file:
            out_file.write(csvstr)
generate_csv(json_content)
    
