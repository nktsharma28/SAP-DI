{
	"properties": {},
	"icon": "",
	"description": "ml_demand - Offer_Propensity",
	"processes": {
		"python3operator1": {
			"component": "com.sap.system.python3Operator",
			"metadata": {
				"label": "Python36 - Inference",
				"x": 1155.999994277954,
				"y": 117,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"metadata": {},
					"script": "#!/usr/bin/env python\r\n# coding: utf-8\r\n\r\n# In[7]:\r\n\r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn import tree\r\nimport pickle\r\nimport io\r\n\r\ndef on_input(msg):\r\n    \r\n     # Input data\r\n    #df= pd.read_csv(\"OFFER_PROPENSITY_INPUT.csv\")\r\n    #df= pd.read_csv(io.StringIO(msg.body), sep=\",\")\r\n    df=pd.read_json(io.StringIO(msg))\r\n    api.send(\"output\",df.to_csv())\r\n    # Generic Columns Name\r\n    customer_id_col='CUSTOMER_ID'\r\n    survey_cols_to_summarize=['PROD_ECOLOGICAL', 'PROD_MEAT_SUBST', 'PROD_FAIRTRADE','PROD_REFORM', 'GREEN_ENERGY', 'FREQUENTING_NATURE', 'ENVIR_CHARITY','NATURE_CHARITY']\r\n    lifestyle_categorical_cols=['EDUCATION','INCOME_LEVEL']\r\n    lifestyle_numerical_cols=[]\r\n    energy_usage_cols=['TOTAL_USAGE_YEAR1', 'TOTAL_USAGE_YEAR2']\r\n    customer_engagement_numerical_cols=['ENERGY_SAVING','COST_TO_SERVE']\r\n    customer_engagement_categorical_cols=[]\r\n    df['NUMBER_OF_QUESTIONS_ANSWERED_YES']=df[survey_cols_to_summarize].sum(axis=1)\r\n    df['NUMBER_OF_QUESTIONS_ANSWERED_CAT'] = 'TWO OR THREE'\r\n    df.loc[df['NUMBER_OF_QUESTIONS_ANSWERED_YES']<=1, 'NUMBER_OF_QUESTIONS_ANSWERED_CAT'] = 'ONE OR LESS'\r\n    df.loc[df['NUMBER_OF_QUESTIONS_ANSWERED_YES']>=4, 'NUMBER_OF_QUESTIONS_ANSWERED_CAT'] = 'FOUR OR MORE'\r\n    # add the variable to list of categorical variables\r\n    lifestyle_categorical_cols.append('NUMBER_OF_QUESTIONS_ANSWERED_CAT')\r\n    \"\"\"\r\n    df['ENERGY_SAVING']=df[energy_usage_cols].apply(lambda row: (row.iloc[1]-row.iloc[0])/(row.iloc[0]*100), axis=1)\r\n    user_inputs_dict = {'customer_id' : customer_id_col, 'survey_cols_to_summarize' : survey_cols_to_summarize, 'energy_usage_cols' : energy_usage_cols}\r\n    #Score the new data\r\n    X = df[['CUSTOMER_ID', 'PROD_ECOLOGICAL', 'PROD_MEAT_SUBST', 'PROD_FAIRTRADE',\r\n           'PROD_REFORM', 'GREEN_ENERGY', 'FREQUENTING_NATURE', 'ENVIR_CHARITY',\r\n           'NATURE_CHARITY', 'AGE_GROUP', 'INCOME_LEVEL', 'EDUCATION',\r\n           'TOTAL_USAGE_YEAR1', 'TOTAL_USAGE_YEAR2', 'ENERGY_SAVING',\r\n           'COST_TO_SERVE', 'NUMBER_OF_QUESTIONS_ANSWERED_YES',\r\n           'NUMBER_OF_QUESTIONS_ANSWERED_CAT']]\r\n    def on_model(model_blob):\r\n  \r\n        #loaded_model = pickle.load(open(\"lifestyle_clf.pickle.dat\", \"rb\"))\r\n        loaded_model = pickle.loads(model_blob)\r\n        df['LIFESTYLE_CLUSTER'] = loaded_model.predict(X)\r\n        df['Q1_ENERGY_SAVING'] = df['ENERGY_SAVING'].quantile(0.25)\r\n        df['Q3_ENERGY_SAVING'] = df['ENERGY_SAVING'].quantile(0.75)\r\n        df['Q1_COST_TO_SERVE'] = df['COST_TO_SERVE'].quantile(0.25)\r\n        df['Q3_COST_TO_SERVE'] = df['COST_TO_SERVE'].quantile(0.75)\r\n        df['ENERGY_SAVING_CAT'] = np.where(df['ENERGY_SAVING']<=df['Q1_ENERGY_SAVING'],'LOW','MEDIUM')\r\n        df['ENERGY_SAVING_CAT'] = np.where(df['ENERGY_SAVING']>=df['Q3_ENERGY_SAVING'],'HIGH',df['ENERGY_SAVING_CAT'])\r\n        df['COST_TO_SERVE_CAT'] = np.where(df['COST_TO_SERVE']<=df['Q1_COST_TO_SERVE'],'LOW','MEDIUM')\r\n        df['COST_TO_SERVE_CAT'] = np.where(df['COST_TO_SERVE']>=df['Q3_COST_TO_SERVE'],'HIGH',df['ENERGY_SAVING_CAT'])\r\n    \r\n        #Clusters\r\n        df['ENGAGEMENT_CLUSTER'] = np.where(((df['ENERGY_SAVING_CAT']=='MEDIUM')&(df['COST_TO_SERVE_CAT']=='HIGH')),'CLUSTER1','OTHER')\r\n        df['ENGAGEMENT_CLUSTER'] = np.where(((df['ENERGY_SAVING_CAT']=='MEDIUM')&(df['COST_TO_SERVE_CAT']=='LOW')),'CLUSTER2',df['ENGAGEMENT_CLUSTER'])\r\n        df['ENGAGEMENT_CLUSTER'] = np.where(((df['ENERGY_SAVING_CAT']=='HIGH')&((df['COST_TO_SERVE_CAT']=='MEDIUM')|(df['COST_TO_SERVE_CAT']=='HIGH'))),'CLUSTER3',df['ENGAGEMENT_CLUSTER'])\r\n        df['ENGAGEMENT_CLUSTER'] = np.where(((df['ENERGY_SAVING_CAT']=='LOW')&((df['COST_TO_SERVE_CAT']=='MEDIUM')|(df['COST_TO_SERVE_CAT']=='LOW'))),'CLUSTER4',df['ENGAGEMENT_CLUSTER'])\r\n        df['ENGAGEMENT_CLUSTER'] = np.where(((df['ENERGY_SAVING_CAT']=='HIGH')&(df['COST_TO_SERVE_CAT']=='LOW')),'CLUSTER5',df['ENGAGEMENT_CLUSTER'])\r\n        df['ENGAGEMENT_CLUSTER'] = np.where(((df['ENERGY_SAVING_CAT']=='LOW')&(df['COST_TO_SERVE_CAT']=='HIGH')),'CLUSTER6',df['ENGAGEMENT_CLUSTER'])\r\n        #Offer\r\n        df['OFFER'] = np.where((((df['ENGAGEMENT_CLUSTER']=='CLUSTER3')|(df['ENGAGEMENT_CLUSTER']=='CLUSTER5'))&(df['HAS_EV']==1)&(df['LIFESTYLE_CLUSTER']==2)),'OFFER1','NONE')\r\n        df['OFFER'] = np.where((((df['ENGAGEMENT_CLUSTER']=='CLUSTER3')|(df['ENGAGEMENT_CLUSTER']=='CLUSTER4'))&(df['LIFESTYLE_CLUSTER']==2)),'OFFER2',df['OFFER'])\r\n        df['OFFER'] = np.where(((df['ENGAGEMENT_CLUSTER']=='CLUSTER1')&((df['LIFESTYLE_CLUSTER']==2)|(df['LIFESTYLE_CLUSTER']==3))&((df['RATE_ID']==2)\r\n                                                                                                                                   |(df['RATE_ID']==3)|(df['RATE_ID']==6)\r\n                                                                                                                                   |(df['RATE_ID']==9)|(df['RATE_ID']==10)\r\n                                                                                                                                   |(df['RATE_ID']==12)|(df['RATE_ID']==13)\r\n                                                                                                                                   |(df['RATE_ID']==16))),'OFFER3',df['OFFER'])\r\n        df['OFFER'] = np.where(((df['ENGAGEMENT_CLUSTER']=='CLUSTER6')&((df['LIFESTYLE_CLUSTER']==2)|(df['LIFESTYLE_CLUSTER']==3))&((df['RATE_ID']==2)\r\n                                                                                                                                   |(df['RATE_ID']==3)|(df['RATE_ID']==6)\r\n                                                                                                                                   |(df['RATE_ID']==9)|(df['RATE_ID']==10)\r\n                                                                                                                                   |(df['RATE_ID']==12)|(df['RATE_ID']==13)\r\n                                                                                                                                   |(df['RATE_ID']==16))),'OFFER4',df['OFFER'])\r\n        df['OFFER'] = np.where((((df['ENGAGEMENT_CLUSTER']=='CLUSTER2')|(df['ENGAGEMENT_CLUSTER']=='CLUSTER5'))&(df['HAS_PV']==1)&(df['LIFESTYLE_CLUSTER']==2)),'OFFER5',df['OFFER'])\r\n    \r\n\r\n        api.set_port_callback(\"model\", on_model)\r\n\r\n\r\n\r\n\"\"\"\r\napi.set_port_callback(\"input\", on_input)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\nimport json\r\n\r\n# Global vars to keep track of model status\r\nmodel = None\r\nmodel_ready = False\r\n\r\n# Validate input data is JSON\r\ndef is_json(data):\r\n  try:\r\n    json_object = json.loads(data)\r\n  except ValueError as e:\r\n    return False\r\n  return True\r\n\r\n# When Model Blob reaches the input port\r\ndef on_model(model_blob):\r\n    global model\r\n    global model_ready\r\n\r\n    model = model_blob\r\n    model_ready = True\r\n    api.logger.info(\"Model Received & Ready\")\r\n\r\n# Client POST request received\r\ndef on_input(msg):\r\n    error_message = \"\"\r\n    success = False\r\n    try:\r\n        api.logger.info(\"POST request received from Client - checking if model is ready\")\r\n        if model_ready:\r\n            api.logger.info(\"Model Ready\")\r\n            api.logger.info(\"Received data from client - validating json input\")\r\n            \r\n            user_data = msg.body.decode('utf-8')\r\n            # Received message from client, verify json data is valid\r\n            if is_json(user_data):\r\n                api.logger.info(\"Received valid json data from client - ready to use\")\r\n                \r\n                # apply your model\r\n                # obtain your results\r\n                success = True\r\n            else:\r\n                api.logger.info(\"Invalid JSON received from client - cannot apply model.\")\r\n                error_message = \"Invalid JSON provided in request: \" + user_data\r\n                success = False\r\n        else:\r\n            api.logger.info(\"Model has not yet reached the input port - try again.\")\r\n            error_message = \"Model has not yet reached the input port - try again.\"\r\n            success = False\r\n    except Exception as e:\r\n        api.logger.error(e)\r\n        error_message = \"An error occurred: \" + str(e)\r\n    \r\n    if success:\r\n        # apply carried out successfully, send a response to the user\r\n        msg.body = json.dumps({'Results': 'Model applied to input data successfully.'})\r\n    else:\r\n        msg.body = json.dumps({'Error': error_message})\r\n    \r\n    new_attributes = {'message.request.id': msg.attributes['message.request.id']}\r\n    msg.attributes =  new_attributes\r\n    api.send('output', msg)\r\n    \r\napi.set_port_callback(\"model\", on_model)\r\napi.set_port_callback(\"input\", on_input)\r\n\"\"\""
				},
				"additionalinports": [
					{
						"name": "model",
						"type": "blob"
					},
					{
						"name": "input",
						"type": "string"
					}
				],
				"additionaloutports": [
					{
						"name": "output",
						"type": "message"
					}
				]
			}
		},
		"constantgenerator1": {
			"component": "com.sap.util.constantGenerator",
			"metadata": {
				"label": "Submit Artifact Name",
				"x": 17,
				"y": 117,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"content": "{\"artifact\": {\"id\": \"${ARTIFACT:MODEL}\"}}"
				}
			}
		},
		"artifactconsumer1": {
			"component": "com.sap.ml.artifact.consumer.v2",
			"metadata": {
				"label": "Artifact Consumer",
				"x": 300.9999990463257,
				"y": 117,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {}
			}
		},
		"readfile1": {
			"component": "com.sap.file.read",
			"metadata": {
				"label": "Read File",
				"x": 855.9999961853027,
				"y": 57,
				"height": 80,
				"width": 120,
				"config": {
					"mode": "Once",
					"connection": {
						"configurationType": "Connection Management",
						"connectionID": "DI_DATA_LAKE"
					},
					"path": "/shared/lifestyle_clf.pickle.dat"
				}
			}
		},
		"toblobconverter1": {
			"component": "com.sap.util.toBlobConverter",
			"metadata": {
				"label": "ToBlob Converter",
				"x": 1040.9999952316284,
				"y": 87,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"tofile1": {
			"component": "com.sap.file.toFile",
			"metadata": {
				"label": "To File",
				"x": 705.499997138977,
				"y": 132,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"tomessageconverter1": {
			"component": "com.sap.util.toMessageConverter",
			"metadata": {
				"label": "ToMessage Converter",
				"x": 201.99999904632568,
				"y": 132,
				"height": 50,
				"width": 50,
				"config": {}
			}
		},
		"wiretap1": {
			"component": "com.sap.util.wiretap",
			"metadata": {
				"label": "Wiretap",
				"x": 1324.999994277954,
				"y": 117,
				"height": 80,
				"width": 120,
				"ui": "dynpath",
				"config": {}
			}
		},
		"12multiplexer1": {
			"component": "com.sap.system.multiplexer.1-2",
			"metadata": {
				"label": "1:2 Multiplexer",
				"x": 485.99999809265137,
				"y": 117,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {}
			}
		},
		"wiretap2": {
			"component": "com.sap.util.wiretap",
			"metadata": {
				"label": "Wiretap",
				"x": 670.999997138977,
				"y": 12,
				"height": 80,
				"width": 120,
				"ui": "dynpath",
				"config": {}
			}
		},
		"constantgenerator1111": {
			"component": "com.sap.util.constantGenerator",
			"metadata": {
				"label": "Constant Generator",
				"x": 670.999997138977,
				"y": 222,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"content": "select * FROM       \"SEP_UTILITY\".\"Z_SEP.AnalyticalModels.Utilities.Propensity_Modeling::TA_UTILITY_PM_OFFER_PROPENSITY_INPUT\"",
					"counter": 0
				}
			},
			"name": "constantgenerator111"
		},
		"tostringconverter111": {
			"component": "com.sap.util.toStringConverter",
			"metadata": {
				"label": "ToString Converter",
				"x": 1040.9999952316284,
				"y": 177,
				"height": 50,
				"width": 50,
				"config": {}
			},
			"name": "tostringconverter11"
		},
		"saphanaclient1111": {
			"component": "com.sap.hana.client2",
			"metadata": {
				"label": "FULL_SAMPLE",
				"x": 855.9999961853027,
				"y": 177,
				"height": 80,
				"width": 120,
				"config": {
					"connection": {
						"configurationType": "Configuration Manager",
						"connectionID": "HANA"
					},
					"tableName": "\"SEP_UTILITY\".\"Z_SEP.AnalyticalModels.Utilities.Propensity_Modeling::TA_UTILITY_PM_OFFER_PROPENSITY_INPUT\"",
					"csvHeader": "Ignore",
					"tableColumns": [
						{
							"name": "\"CUSTOMER_ID\"",
							"type": "BIGINT"
						},
						{
							"name": "\"PROD_ECOLOGICAL\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"PROD_MEAT_SUBST\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"PROD_FAIRTRADE\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"PROD_REFORM\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"GREEN_ENERGY\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"FREQUENTING_NATURE\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"ENVIR_CHARITY\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"NATURE_CHARITY\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"AGE_GROUP\"",
							"type": "NVARCHAR",
							"size": 10
						},
						{
							"name": "\"INCOME_LEVEL\"",
							"type": "NVARCHAR",
							"size": 15
						},
						{
							"name": "\"EDUCATION\"",
							"type": "NVARCHAR",
							"size": 30
						},
						{
							"name": "\"TOTAL_USAGE_YEAR1\"",
							"type": "DECIMAL"
						},
						{
							"name": "\"TOTAL_USAGE_YEAR2\"",
							"type": "DECIMAL"
						},
						{
							"name": "\"ENERGY_SAVING\"",
							"type": "DECIMAL"
						},
						{
							"name": "\"COST_TO_SERVE\"",
							"type": "DECIMAL"
						},
						{
							"name": "\"HAS_EV\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"HAS_PV\"",
							"type": "NVARCHAR",
							"size": 1
						},
						{
							"name": "\"RATE_ID\"",
							"type": "INTEGER"
						},
						{
							"name": "\"RATE_DESCRIPTION\"",
							"type": "NVARCHAR",
							"size": 30
						}
					],
					"networkBatchSize": 5000,
					"connectionTimeoutInMs": 50000
				}
			},
			"name": "saphanaclient111"
		}
	},
	"groups": [
		{
			"name": "group1",
			"nodes": [
				"python3operator1"
			],
			"metadata": {
				"description": "Group"
			},
			"tags": {
				"scikit-learn": "0.20.0"
			}
		}
	],
	"connections": [
		{
			"metadata": {
				"points": "141,157 168.99999952316284,157 168.99999952316284,166 196.99999904632568,166"
			},
			"src": {
				"port": "out",
				"process": "constantgenerator1"
			},
			"tgt": {
				"port": "instring",
				"process": "tomessageconverter1"
			}
		},
		{
			"metadata": {
				"points": "255.99999904632568,157 295.9999990463257,157"
			},
			"src": {
				"port": "out",
				"process": "tomessageconverter1"
			},
			"tgt": {
				"port": "inArtifact",
				"process": "artifactconsumer1"
			}
		},
		{
			"metadata": {
				"points": "759.499997138977,157 822.9999966621399,157 822.9999966621399,97 850.9999961853027,97"
			},
			"src": {
				"port": "file",
				"process": "tofile1"
			},
			"tgt": {
				"port": "ref",
				"process": "readfile1"
			}
		},
		{
			"metadata": {
				"points": "979.9999961853027,88 1007.9999957084656,88 1007.9999957084656,112 1035.9999952316284,112"
			},
			"src": {
				"port": "file",
				"process": "readfile1"
			},
			"tgt": {
				"port": "ininterface",
				"process": "toblobconverter1"
			}
		},
		{
			"metadata": {
				"points": "1094.9999952316284,112 1122.9999947547913,112 1122.9999947547913,148 1150.999994277954,148"
			},
			"src": {
				"port": "outbytearray",
				"process": "toblobconverter1"
			},
			"tgt": {
				"port": "model",
				"process": "python3operator1"
			}
		},
		{
			"metadata": {
				"points": "1279.999994277954,157 1319.999994277954,157"
			},
			"src": {
				"port": "output",
				"process": "python3operator1"
			},
			"tgt": {
				"port": "in",
				"process": "wiretap1"
			}
		},
		{
			"metadata": {
				"points": "424.9999990463257,148 452.9999985694885,148 452.9999985694885,157 480.99999809265137,157"
			},
			"src": {
				"port": "outArtifact",
				"process": "artifactconsumer1"
			},
			"tgt": {
				"port": "in1",
				"process": "12multiplexer1"
			}
		},
		{
			"metadata": {
				"points": "609.9999980926514,148 637.9999976158142,148 637.9999976158142,52 665.999997138977,52"
			},
			"src": {
				"port": "out1",
				"process": "12multiplexer1"
			},
			"tgt": {
				"port": "in",
				"process": "wiretap2"
			}
		},
		{
			"metadata": {
				"points": "794.999997138977,262 822.9999966621399,262 822.9999966621399,208 850.9999961853027,208"
			},
			"src": {
				"port": "out",
				"process": "constantgenerator1111"
			},
			"tgt": {
				"port": "sql",
				"process": "saphanaclient1111"
			}
		},
		{
			"metadata": {
				"points": "979.9999961853027,217 1007.9999957084656,217 1007.9999957084656,193 1035.9999952316284,193"
			},
			"src": {
				"port": "result",
				"process": "saphanaclient1111"
			},
			"tgt": {
				"port": "ininterface",
				"process": "tostringconverter111"
			}
		},
		{
			"metadata": {
				"points": "1094.9999952316284,202 1122.9999947547913,202 1122.9999947547913,166 1150.999994277954,166"
			},
			"src": {
				"port": "outstring",
				"process": "tostringconverter111"
			},
			"tgt": {
				"port": "input",
				"process": "python3operator1"
			}
		},
		{
			"metadata": {
				"points": "609.9999980926514,166 700.499997138977,166"
			},
			"src": {
				"port": "out2",
				"process": "12multiplexer1"
			},
			"tgt": {
				"port": "in",
				"process": "tofile1"
			}
		}
	],
	"inports": {},
	"outports": {}
}