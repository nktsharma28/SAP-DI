{
	"properties": {},
	"icon": "",
	"description": "ML_PTM - Cognitive Price Model Consumer",
	"processes": {
		"python3operator11111": {
			"component": "com.sap.system.python3Operator",
			"metadata": {
				"label": "CongnitivePricing_Training",
				"x": 462.99999713897705,
				"y": 185,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"script": "#import Libraries\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n#import xgboost as xgb\r\nfrom sklearn import tree\r\nfrom sklearn.ensemble import GradientBoostingRegressor\r\nfrom scipy.optimize import minimize_scalar\r\nimport io\r\nimport pickle\r\n\r\n\r\n\r\ndef on_input(msg1, msg2):\r\n    \r\n    \r\n   \r\n    \r\n\r\n    \r\n    \r\n    #model_ready = True\r\n    #api.logger.info(\"Model Received & Ready\")\r\n    #api.send(\"logging\", \"Model Ready!\")\r\n\r\n    # Obtain data\r\n    # input table from Z_SEP.AnalyticalModels.LTO.IMC.CongnitivePricing::TA_IMC_CPQ_INFER_INPUT\r\n    \r\n    df_raw = pd.read_csv(io.StringIO(msg1.body), sep=\",\")\r\n    df = pd.DataFrame()\r\n    df['QUOTE_ID'] = df_raw.iloc[:,0]\r\n    df['CUSTOMER_NAME'] = df_raw.iloc[:,1]\r\n    df['INDUSTRY'] = df_raw.iloc[:,2]\r\n    df['CREATION_DATE'] = df_raw.iloc[:,3]\r\n    df['COUNTRY'] = df_raw.iloc[:,4]\r\n    df['PRODUCT_NAME'] = df_raw.iloc[:,5]\r\n    df['MODEL'] = df_raw.iloc[:,6]\r\n    df['SUPPLY_VOLTAGE_A'] = df_raw.iloc[:,7]\r\n    df['COM_QUANTITY'] = df_raw.iloc[:,8]\r\n    df['STATUS'] = df_raw.iloc[:,9]\r\n    df['LISTPRICE'] = df_raw.iloc[:,10].astype(float)\r\n    df['MANUFACTURING_COST'] = df_raw.iloc[:,11].astype(float)\r\n    df['QUOTED_PRICE'] = df_raw.iloc[:,12].astype(float) \r\n    api.send(\"output1\",'before model')\r\n    \r\n   # input table from Z_SEP.AnalyticalModels.LTO.IMC.CongnitivePricing::TA_IMC_CPQ_INFER_INPUTTA_IMC_CPQ_TRAINING_SEGMENTS\r\n    Output_Seg_raw = pd.read_csv(io.StringIO(msg2.body), sep=\",\")\r\n    Output_Seg = pd.DataFrame()\r\n    Output_Seg['SEGMENT_ID'] = Output_Seg_raw.iloc[:,0].astype(int)\r\n    Output_Seg['LEAD_BRAND_ID'] = Output_Seg_raw.iloc[:,1].astype(int)\r\n    Output_Seg['LEADING_PRODUCT'] = Output_Seg_raw.iloc[:,2]\r\n    Output_Seg['COUNT'] = Output_Seg_raw.iloc[:,3].astype(float)\r\n    Output_Seg['VAL_SEG_ID'] = Output_Seg_raw.iloc[:,4].astype(int)\r\n    Output_Seg['VAL_MIN'] = Output_Seg_raw.iloc[:,5].astype(float)\r\n    Output_Seg['VAL_MAX'] = Output_Seg_raw.iloc[:,6].astype(float)\r\n    Output_Seg['VAL_COUNT'] = Output_Seg_raw.iloc[:,7].astype(float)\r\n    Output_Seg['LEAD_CONST'] = Output_Seg_raw.iloc[:,8].astype(float)\r\n    Output_Seg['LEAD_GP_PCT_VALUE'] = Output_Seg_raw.iloc[:,9].astype(float)\r\n    Output_Seg['LEAD_LIST_VALUE'] = Output_Seg_raw.iloc[:,10].astype(float)\r\n    Output_Seg['LEAD_TMC_VALUE'] = Output_Seg_raw.iloc[:,11].astype(float)\r\n    Output_Seg['VAL_CONST'] = Output_Seg_raw.iloc[:,12].astype(float)\r\n    Output_Seg['VAL_GP_PCT_VALUE'] = Output_Seg_raw.iloc[:,13].astype(float) \r\n    Output_Seg['VAL_LIST_VALUE'] = Output_Seg_raw.iloc[:,14].astype(float) \r\n    Output_Seg['VAL_TMC_VALUE'] = Output_Seg_raw.iloc[:,15].astype(float)  \r\n\r\n    def WProb_(x, input_coef, b):\r\n        \"\"\"\r\n        Given a price and parameters of the package compute the win probability\r\n        x: input price\r\n        input_coef: Series containing other input parameters of the package\r\n        b: Series containing the estimated parameters of the regression model\r\n        \"\"\"                                                                                                                                                                \r\n        #fill the NaN value with 0 for computation\r\n        b = b.fillna(0.0)  \r\n        listp_value = input_coef['LIST_VALUE'] - 1\r\n        tmc = input_coef['TMC'] \r\n        listp = input_coef['LISTPRICE']\r\n        value = listp / input_coef['LIST_VALUE']\r\n        tmc_value = 1 - tmc / value \r\n        regressor=[1.0, - (x - tmc) / value, listp_value, tmc_value]\r\n        z = np.exp(np.dot(regressor, b)) / ( 1 + np.exp(np.dot(regressor, b)) )\r\n        return z\r\n\r\n\r\n    def Rev_(x, input_coef, b):\r\n        \"\"\"\r\n        Given a price and parameters of the package compute the NEGATIVE revenue\r\n        x: input price\r\n        input_coef: Series containing other input parameters of the package\r\n        b: Series containing the estimated parameters of the regression model\r\n        \"\"\"     \r\n        tmc = input_coef['TMC']                                                                                                                                                            \r\n        return - (x - tmc) * WProb_(x, input_coef, b)    \r\n\r\n\r\n    def OptPrice(Input, b):\r\n        \"\"\"\r\n        Given the input and price sensitivity information compute optimal price\r\n        x: input price\r\n        Input: Dataframe containing all the input information\r\n        b: Series containing the estimated parameters of the regression model\r\n        \"\"\"   \r\n        Value = Input.LISTPRICE / Input.LIST_VALUE\r\n        TMC = Input.TMC\r\n        QuotePrice = Input.GP_PCT_VALUE * Value + Input.TMC\r\n        #Organizing Response variables\r\n        #Response = Input['Win']        \r\n        #Creating Lists for storing results\r\n        WP_act = list(range(len(Response)))\r\n        gp_pct_act = list(range(len(Response)))\r\n        Discount_act = list(range(len(Response)))\r\n        WP_opt = list(range(len(Response)))\r\n        gp_pct_opt = list(range(len(Response)))\r\n        OptPrice = list(range(len(Response)))\r\n        Discount_opt = list(range(len(Response)))\r\n\r\n        for i in range(len(Response)):\r\n            input_coef = Input.iloc[i]  \r\n            x_act = QuotePrice.iloc[i]\r\n            c = TMC.iloc[i]  \r\n            p_l = Input.LISTPRICE.iloc[i]    \r\n            WP_act[i] = WProb_(x_act, input_coef, b)\r\n            gp_pct_act[i] = (x_act - c) / x_act \r\n            Discount_act[i] = (p_l - x_act) / p_l\r\n\r\n            res = minimize_scalar(Rev_, bounds = (c, p_l), args = (input_coef, b), method = 'bounded') \r\n            x_opt = res.x\r\n            WP_opt[i] = WProb_(x_opt, input_coef, b)\r\n            gp_pct_opt[i] = (x_opt - c) / x_opt\r\n            OptPrice[i] = x_opt\r\n            Discount_opt[i] = (p_l - x_opt) / p_l\r\n\r\n\r\n        #Combining the outcomes\r\n        #Add columns discount_act and discount_opt\r\n\r\n        Output = pd.DataFrame({})\r\n        #Output['Response'] = Response.values\r\n        Output['QuotePrice'] = QuotePrice.values\r\n        Output['WP_act'] = WP_act\r\n        Output['gp_pct_act'] = gp_pct_act\r\n        Output['Discount_act'] = Discount_act\r\n        Output['OptPrice'] = OptPrice\r\n        Output['WP_opt'] = WP_opt\r\n        Output['gp_pct_opt'] = gp_pct_opt\r\n        Output['Discount_opt'] = Discount_opt\r\n        return Output\r\n        api.send(\"output1\",'before model')\r\n\r\n\r\n    def Business_Case(Output, re_output = False):\r\n        \"\"\"\r\n        Compute the business case as a control for choosing segmentation.\r\n        Output: the output from OptPrice, records the optimal prices, etc\r\n        re_output: whether return the table for the business case result\r\n        Return: returns the sum of business case values and if re_ouput is specified\r\n        to be true, also returns the table of each business case value.\r\n        \"\"\"    \r\n        Revenue_Diff = list(range(len(Output)))\r\n        for i in range(len(Output)):\r\n            p_opt = Output.OptPrice.iloc[i]\r\n            p_act = Output.QuotePrice.iloc[i]\r\n            q_opt = Output.WP_opt.iloc[i]\r\n            q_act = Output.WP_act.iloc[i]\r\n            if Output.Response.iloc[i] == 1:\r\n                if p_opt > p_act:\r\n                    Revenue_Diff[i] = q_opt/q_act * p_opt - p_act\r\n                else:\r\n                    Revenue_Diff[i] = p_opt - p_act\r\n            else:\r\n                if p_opt > p_act:\r\n                    Revenue_Diff[i] = 0.0\r\n                else:\r\n                    Revenue_Diff[i] = (1 - (1 - q_opt)/(1 - q_act)) * p_opt                \r\n        BC_Value = np.sum(Revenue_Diff)\r\n        Output['Business_Case'] = Revenue_Diff\r\n        if re_output == False:\r\n            return BC_Value\r\n        else:\r\n            return BC_Value, Output\r\n\r\n\r\n    def unique_arr(arr):\r\n        \"\"\"\r\n        Helper function to return the unique values in a ndarray.\r\n        np.unique() can only deal wiht 1-D array.\r\n        \"\"\"\r\n        arr = np.asarray(arr)\r\n        uniques = []\r\n        for i in range(len(arr)):\r\n            if list(arr[i]) not in uniques:\r\n                uniques.append(list(arr[i]))\r\n        return uniques\r\n    def Label_Seg(Input_Data, Infile_Data):                  \r\n        \"\"\"\r\n        Labels each transaction in the original data to the segment it belongs.\r\n\r\n        Parameters\r\n        ----------\r\n        Input_Data: A dataframe that contains all the original transaction data.\r\n        Input_Seg: A dataframe that contains the segmentation information for each OD cluster pair\r\n        f_name: The data directory and file names to write the file\r\n        version: The version of data and cluster level\r\n\r\n        Return\r\n        -------\r\n        The revised input data.\r\n\r\n        \"\"\"                                     \r\n        seg_id = list(np.zeros(len(Input_Data), dtype = 'i4'))\r\n        Discount_act = list(np.zeros(len(Input_Data)))\r\n        Discount_sd =list(np.zeros(len(Input_Data)))\r\n        lw = list(np.zeros(len(Input_Data)))\r\n        up = list(np.zeros(len(Input_Data)))\r\n\r\n\r\n        for i in range(len(Input_Data)):\r\n            brand = Input_Data.loc[i,'PRODUCT_BRAND']\r\n            Value = Input_Data.loc[i,'LIST_VALUE']\r\n\r\n\r\n\r\n            \r\n            if len(Infile_Data) > 1:\r\n                for j in range(len(Infile_Data)):\r\n                    if ( (brand == Infile_Data.loc[j, 'LEADING_PRODUCT']) and\r\n                    (Value > Infile_Data.loc[j, 'VAL_MIN']) and (Value <= Infile_Data.loc[j, 'VAL_MAX'])   ):\r\n                        seg_id[i] = Infile_Data.loc[j, 'SEGMENT_ID']\r\n\r\n                        lw[i] = 0\r\n                        up[i]=0\r\n            else:\r\n                seg_id[i] = Infile_Data.loc[0, 'SEGMENT_ID']\r\n\r\n                lw[i] = 0\r\n                up[i] = 0\r\n        Input_Data['SEGMENT_ID'] = seg_id\r\n\r\n\r\n        return Input_Data      \r\n    def Compute_Opt_Price(Input_Data, Infile_Data):                  \r\n        \"\"\"\r\n        Compute the optimal price according to the features and the corresponding parameter estimates in\r\n        \"Input_Seg\" for each transaction in \"Input_Data\".\r\n\r\n        Parameters\r\n        ----------\r\n        Input_Data: A dataframe that contains all the original transaction data / new request for quotes\r\n        Input_Seg: A dataframe that contains the segmentation AND regression information (FINAL_REG_SEG)\r\n        f_name: The data directory and file names to write the file\r\n\r\n\r\n        Outputs:\r\n        --------\r\n        Writes the labeled data to a new file.\r\n\r\n        Return\r\n        -------\r\n        The revised input data.\r\n\r\n        \"\"\"    \r\n        opt_price = list(np.zeros(len(Input_Data)))\r\n        x_opt = list(np.zeros(len(Input_Data))) \r\n        WP_act = list(np.zeros(len(Input_Data)))\r\n        WP_opt = list(np.zeros(len(Input_Data)))\r\n\r\n\r\n\r\n        for i in np.arange(len(Input_Data)):\r\n            if i % 1000 == 0:\r\n                print ('Processing quotes.')\r\n\r\n            seg_id = Input_Data.loc[i, 'SEGMENT_ID']\r\n            k = Input_Data.loc[i, 'TMC']\r\n            l = Input_Data.loc[i, 'LISTPRICE']\r\n            #param = Infile_Data.loc[seg_id, ['VAL_const', 'VAL_GP_PCT_VALUE', 'VAL_LIST_VALUE','VAL_TMC_VALUE']]\r\n            param = Infile_Data.reindex[seg_id, ['VAL_const', 'VAL_GP_PCT_VALUE', 'VAL_LIST_VALUE','VAL_TMC_VALUE']]\r\n            param = param.fillna(0.0)\r\n            input_coef = Input_Data.iloc[i]\r\n\r\n            res1 = minimize_scalar( Rev_, bounds = (k,l), args = (input_coef, param), method = 'bounded' )\r\n\r\n\r\n            opt_price[i] = res1.x\r\n            x_opt[i] = opt_price[i]\r\n            x_act = Input_Data.loc[i, 'QUOTED_PRICE']\r\n            WP_act[i] = WProb_(x_act, input_coef, param)\r\n            WP_opt[i] = WProb_(x_opt[i], input_coef, param)\r\n\r\n\r\n\r\n        Input_Data['OPT_PRICE'] = opt_price\r\n        Input_Data['WIN_ACT'] = WP_act\r\n        Input_Data['WIN_OPT'] = WP_opt\r\n\r\n        return Input_Data\r\n        \r\n\r\n\r\n\r\n    #Input Data -- \r\n    #test_data = pd.read_csv(\"C:/CogPrice/test_data.csv\")\r\n\r\n\r\n    # Developed model saved it in my local-- need some place to save it in DI\r\n    #loaded_model = pickle.load(open(\"xgb.pickle.dat\", \"rb\"))\r\n    def on_model(model_cp):\r\n        \r\n            \r\n        global loaded_model\r\n        global model_ready\r\n        import pickle\r\n        loaded_model = pickle.loads(model_cp)\r\n        api.send(\"output1\",'model')\r\n        \r\n        test_data = df\r\n        #X = pd.DataFrame(test_data, columns=['LISTPRICE','MANUFACTURING_COST'])\r\n        #X = test_data[['LISTPRICE','MANUFACTURING_COST']]\r\n        test_data['UtilityAdj'] = loaded_model.predict(test_data[['LISTPRICE','MANUFACTURING_COST']])\r\n        test_data['LIST_VALUE'] = test_data['LISTPRICE']/test_data['UtilityAdj']\r\n        test_data['GP_PCT_VALUE'] = (test_data['QUOTED_PRICE'] - test_data['MANUFACTURING_COST'])/test_data['UtilityAdj']\r\n        test_data['GP_PCT_PRICE'] = (test_data['QUOTED_PRICE'] - test_data['MANUFACTURING_COST'])/test_data['QUOTED_PRICE']\r\n        test_data['Discount'] = 1-(test_data['QUOTED_PRICE']/test_data['LISTPRICE'])\r\n        test_data['PRODUCT_BRAND'] = test_data['MODEL']\r\n   \r\n        test_data['TMC']= test_data['MANUFACTURING_COST']\r\n        #test_data['Win']= np.where(test_data['STATUS'] == 'Y',1,0)\r\n        test_data1 = Label_Seg(test_data, Output_Seg)\r\n        final_Output = Compute_Opt_Price(test_data1, Output_Seg)\r\n        discount_data = pd.DataFrame(final_Output,columns=['PRODUCT_BRAND','Discount']).copy()\r\n\r\n        discount_data['Discount_mean']=discount_data['Discount']\r\n        discount_data['Discount_std']=discount_data['Discount']\r\n        discount_agg_model = discount_data.groupby('PRODUCT_BRAND').agg({'Discount_mean':np.mean,'Discount_std':np.std}).reset_index()\r\n        del discount_data['Discount_mean']\r\n        del discount_data['Discount_std']\r\n        final_data = pd.merge(final_Output,discount_agg_model,on='PRODUCT_BRAND',how='left')\r\n        final_data['key1'] = 0\r\n        final_data['key2'] = 1\r\n        final_data['low']= 1-final_data['Discount_mean']- 2*final_data['Discount_std']\r\n        final_data['min_level'] = (final_data[['key2','low']]).min(axis=1)\r\n        final_data['max_min_level']=final_data[['min_level','key1']].max(axis=1)\r\n        final_data['low_bound'] = final_data['max_min_level']*final_data['LISTPRICE']\r\n            \r\n        final_data['up']= 1-final_data['Discount_mean']+2*final_data['Discount_std']\r\n        final_data['min_level_up'] = (final_data[['key2','up']]).min(axis=1)\r\n        final_data['max_min_level_up']=final_data[['min_level_up','key1']].max(axis=1)\r\n        final_data['up_bound'] = final_data['max_min_level_up']*final_data['LISTPRICE']\r\n        final_data['low_bound'] =np.where(final_data['low_bound']<final_data['TMC'],final_data['TMC'],final_data['low_bound'])\r\n        final_data['up_bound'] =np.where(final_data['up_bound']<final_data['OPT_PRICE'],final_data['LISTPRICE'],final_data['up_bound'])\r\n        fin_infer_opt_price = pd.DataFrame({ 'QUOTE_ID': final_data['QUOTE_ID'] ,'CUSTOMER_NAME':  final_data['CUSTOMER_NAME'],\r\n                              'INDUSTRY': final_data['INDUSTRY'], 'CREATION_DATE': final_data['CREATION_DATE'],\r\n                              'COUNTRY': final_data['COUNTRY'], 'QUANTITY': final_data['COM_QUANTITY'],\r\n                              'LISTPRICE': final_data['LISTPRICE'],'MANUFACTURING_COST': final_data['MANUFACTURING_COST'],\r\n                              'QUOTED_PRICE': final_data['QUOTED_PRICE'],'OPTIMUM_PRICE': final_data['OPT_PRICE'],\r\n                              'PROB_WIN_OPTIMAL':final_data['WIN_OPT'],'PROB_WIN_ACTUAL': final_data['WIN_ACT'],\r\n                              'OPTIMAL_LOWER':final_data['low_bound'],'OPTIMAL_HIGHER':final_data['up_bound'],})\r\n                              \r\n        fin_infer_opt_price.fillna(0, inplace=True)\r\n        fin_infer_opt_price = fin_infer_opt_price.round(6)\r\n    \r\n        data =  fin_infer_opt_price.values.tolist()\r\n        api.send(\"output1\",data)\r\n        \r\n    api.send(\"output1\",'after model')\r\n    api.set_port_callback(\"model\", on_model)\r\n        \r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n       \r\n    \r\n    \r\n    \r\n  \r\n  \r\n        \r\n        \r\n        \r\n        \r\n\r\n    # This is the output segments ,should come from HANA table\r\n\r\n        \r\n        \r\n        \r\n\r\n\r\n    \r\n        \r\n    \r\n    #data2 = [fin_Output_Seg.columns.values.tolist()] + Output_Seg.values.tolist()\r\n        #f = '{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}'  # format final_data\r\n    #f2 = '{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}' # format Output_Seg\r\n    #for i in data:\r\n        #api.send(\"output1\",f.format(*i)+'\\n')\r\n  \r\n    \r\n#fin_infer_opt_price write-back to Hana Output Table \"TA_IMC_CPQ_INFER_OPTIMAL_PRICE\"\r\n\r\n\r\n\r\napi.set_port_callback([\"input1\",\"input2\"], on_input)"
				},
				"additionalinports": [
					{
						"name": "input2",
						"type": "message"
					},
					{
						"name": "input1",
						"type": "message"
					},
					{
						"name": "model",
						"type": "blob"
					}
				],
				"additionaloutports": [
					{
						"name": "output1",
						"type": "message"
					}
				]
			},
			"name": "python3operator1111"
		},
		"constantgenerator1": {
			"component": "com.sap.util.constantGenerator",
			"metadata": {
				"label": "Submit Artifact Name",
				"x": 17,
				"y": 252,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"content": "${ARTIFACT:MODEL}"
				}
			}
		},
		"artifactconsumer1": {
			"component": "com.sap.ml.artifact.consumer",
			"metadata": {
				"label": "Artifact Consumer",
				"x": 201.99999904632568,
				"y": 222,
				"height": 80,
				"width": 120,
				"extensible": true,
				"config": {
					"opMode": "input"
				}
			}
		},
		"wiretap11": {
			"component": "com.sap.util.wiretap",
			"metadata": {
				"label": "Wiretap",
				"x": 667.9999961853027,
				"y": 177,
				"height": 80,
				"width": 120,
				"ui": "dynpath",
				"config": {}
			},
			"name": "wiretap1"
		},
		"readfile1111": {
			"component": "com.sap.file.read",
			"metadata": {
				"label": "Read File",
				"x": 17,
				"y": 132,
				"height": 80,
				"width": 120,
				"config": {
					"mode": "Once",
					"connection": {
						"configurationType": "Connection Management",
						"connectionID": "DI_DATA_LAKE"
					},
					"path": "/shared/TEST_INFER_INPUT.csv"
				}
			},
			"name": "readfile111"
		},
		"tostringconverter1111": {
			"component": "com.sap.util.toStringConverter",
			"metadata": {
				"label": "ToString Converter",
				"x": 226.5,
				"y": 131,
				"height": 50,
				"width": 50,
				"config": {}
			},
			"name": "tostringconverter111"
		},
		"readfile11111": {
			"component": "com.sap.file.read",
			"metadata": {
				"label": "Read File",
				"x": 17,
				"y": 12,
				"height": 80,
				"width": 120,
				"config": {
					"mode": "Once",
					"connection": {
						"configurationType": "Connection Management",
						"connectionID": "DI_DATA_LAKE"
					},
					"path": "/shared/TEST_TRAINING_SEGMENT.csv"
				}
			},
			"name": "readfile1111"
		},
		"tostringconverter11111": {
			"component": "com.sap.util.toStringConverter",
			"metadata": {
				"label": "ToString Converter",
				"x": 277.4999990463257,
				"y": 27,
				"height": 50,
				"width": 50,
				"config": {}
			},
			"name": "tostringconverter1111"
		}
	},
	"groups": [
		{
			"name": "group11",
			"nodes": [
				"python3operator11111"
			],
			"metadata": {
				"description": "Group"
			},
			"tags": {
				"CP": ""
			}
		}
	],
	"connections": [
		{
			"metadata": {
				"points": "141,292 168.99999952316284,292 168.99999952316284,271 196.99999904632568,271"
			},
			"src": {
				"port": "out",
				"process": "constantgenerator1"
			},
			"tgt": {
				"port": "inArtifactID",
				"process": "artifactconsumer1"
			}
		},
		{
			"metadata": {
				"points": "586.999997138977,225 634.9999966621399,225 634.9999966621399,217 662.9999961853027,217"
			},
			"src": {
				"port": "output1",
				"process": "python3operator11111"
			},
			"tgt": {
				"port": "in",
				"process": "wiretap11"
			}
		},
		{
			"metadata": {
				"points": "141,43 272.4999990463257,43"
			},
			"src": {
				"port": "file",
				"process": "readfile11111"
			},
			"tgt": {
				"port": "ininterface",
				"process": "tostringconverter11111"
			}
		},
		{
			"metadata": {
				"points": "331.4999990463257,52 394.75,52 394.75,207 457.99999713897705,207"
			},
			"src": {
				"port": "outstring",
				"process": "tostringconverter11111"
			},
			"tgt": {
				"port": "input2",
				"process": "python3operator11111"
			}
		},
		{
			"metadata": {
				"points": "325.9999990463257,244 353.9999985694885,244 353.9999985694885,236 429.9999976158142,236 429.9999976158142,243 457.99999713897705,243"
			},
			"src": {
				"port": "outArtifact",
				"process": "artifactconsumer1"
			},
			"tgt": {
				"port": "model",
				"process": "python3operator11111"
			}
		},
		{
			"metadata": {
				"points": "141,163 181.25,163 181.25,147 221.5,147"
			},
			"src": {
				"port": "file",
				"process": "readfile1111"
			},
			"tgt": {
				"port": "ininterface",
				"process": "tostringconverter1111"
			}
		},
		{
			"metadata": {
				"points": "280.5,156 369.25,156 369.25,225 457.99999713897705,225"
			},
			"src": {
				"port": "outstring",
				"process": "tostringconverter1111"
			},
			"tgt": {
				"port": "input1",
				"process": "python3operator11111"
			}
		}
	],
	"inports": {},
	"outports": {}
}